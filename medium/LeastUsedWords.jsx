#includepath "~/Documents/;%USERPROFILE%Documents";#include "basiljs/bundle/basil.js";function draw() {        var hash = new HashList();    var tf = b.selections()[0]; // this makes the selected item now being referred to as var tf. the [0] is because the "selection" always returns an array, and this referes to the first object in an array.            var words = b.words(tf.parentStory); // this is identifying the words from tf's whole story. tf.parentStory is acting like us highlighting the whole text.    var str;    for( var i = 0; i < words.length; i++){ //for all the words in the words array, add them to str, and then trim them of . , " etc        str = normalizeString(words[i].contents); // this runs the normalizestring function listed below        if (str == "") continue; // special case: nothing left after trimWord         //count the number of occurances        if( hash.hasKey(str) ){ // identifies a word from the array          //  b.println(str); // adds it to the console (seen in this program)            hash.set(str, hash.get(str) + 1); //adds 1 to the count for this word        } else {            hash.set( str, 1 ); // if the word didn't appear before, add it to the set with count 1       }    }        var keys = hash.getKeysByValues() ; // sorts it by the number of its occurences    // getValues() ???        for( var i = 0; i < words.length; i++ ) { // for all the words in the words array               var word = words[i]; // word = the word currently being looked at       /*       if(word.contents == "the"){ // this code was testing whether the script was counting "The" as "the", it does, yay!       b.println(hash.get("the"));          }    */     if (word.length > 6) { // this is an if-else statement, if the word is more than 6 characters long, it runs the code before the else statement                var myMax = hash.get(keys[0]);        var frequency = hash.get( normalizeString (word.contents) );        frequency = b.constrain(frequency, 0, myMax);        frequency = b.map(frequency, 0, myMax, 50, 5);               var typeLength = b.map(word.length,1,20,5,50);       var number = hash.get( normalizeString (word.contents) );        var relation = typeLength/ number;        relation = b.constrain(relation, 5, 50);                b.typo( word, "pointSize", relation);             } else {                var myMax = hash.get(keys[0]);       var frequency = hash.get( normalizeString (word.contents) );        frequency = b.constrain(frequency, 0, myMax);        frequency = b.map(frequency, 0, myMax, 10, 5);                 b.typo( word, "pointSize", frequency );       }            }}function normalizeString(myString) {            myString= b.trimWord(myString);        myString= myString.toLowerCase();        return myString;     }b.go();