// @include "basil.js";// @include "./lib/underscore.js";function draw() {  // get selection, only Indesign Text objects  var selection = b.selections();  selection = _.filter(selection, function(item) {return b.isText(item)});  if (selection.length === 0) { alert("Please select some Text (something inside TextFrame)") };  createUI(function(error, styleOption, fontSizeStart, fontSizeEnd) {    if (!error) {      // process selection      _.each(selection, function(textItem) {        tweenCharactersFontsize(textItem, styleOption, fontSizeStart, fontSizeEnd)      });    }  });}function tweenCharactersFontsize(textItem, styleOption, start, end) {  var l = textItem.characters.length; // length  var m = parseInt(l/2); // middle  _.each(textItem.characters, function(c, i) {    // down    if (styleOption === 0) {      c.pointSize = b.map(i, 0,l-1, start,end);    // up    } else if (styleOption === 1) {      c.pointSize = b.map(i, 0,l-1, end,start);    // hill    } else if (styleOption === 2) {      if (i < m) c.pointSize = b.map(i, 0,m, end,start);      else  c.pointSize = b.map(i, m,l-1, start,end);    // valley    } else {      if (i < m) c.pointSize = b.map(i, 0,m, start,end);      else  c.pointSize = b.map(i, m,l-1, end,start);    }  })}function createUI(cb) {  var dialog = app.dialogs.add({    name: "Tween fontsizes of selected characters",    canCancel: true  });  var numInput1 = null;  var numInput2 = null;  var radioButtons = null;  with(dialog) {    // column    with(dialogColumns.add()) {      staticTexts.add({staticLabel:"Fontsize start (pt)"});      staticTexts.add({staticLabel:"Fontsize end (pt)"});    }    // column    with(dialogColumns.add()) {      numInput1 = realEditboxes.add({editValue: 22});      numInput2 = realEditboxes.add({editValue: 11});    }    // column    with(dialogColumns.add()) {      // border panel      with(borderPanels.add()) {        staticTexts.add({staticLabel: "Style"});        radioButtons = radiobuttonGroups.add();        with(radioButtons) {          radiobuttonControls.add({staticLabel:"Down", checkedState:true});          radiobuttonControls.add({staticLabel:"Up"});          radiobuttonControls.add({staticLabel:"Hill"});          radiobuttonControls.add({staticLabel:"Valley"});        }      }    }  }  var results = dialog.show();  if(results) {    cb(      null,      radioButtons.selectedButton,      numInput1.editValue,      numInput2.editValue    );  } else {    cb("user clicked cancel");  }  // remove dialog from memory  dialog.destroy();}b.go(b.MODESILENT);