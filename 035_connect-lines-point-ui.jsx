// @include "basil.js";// @include "./lib/underscore.js";function draw() {  // get name of active script w/o file extension  var scriptName = (new File($.fileName)).name.slice(0, -4);  // get selection, filtered by TextFrame  var selection = b.selections();  selection = _.filter(    selection,    function(item) { return item.constructor.name === "TextFrame"}  );  if (selection.length === 0) { alert("Please select some TextFrames") };  // create/use dedicated layer and color for results  var layer = b.layer(scriptName);  var color = b.color(128,128,128, scriptName);  b.noFill();  b.stroke(color);  b.strokeWeight(0.25);  createUI(function(error, fromEOL, x, y) {    if (!error) {      // process selection      _.each(selection, function(textFrame) {        connectLinesToPoint(textFrame, fromEOL, x, y);      });    }  });}function connectLinesToPoint(textFrame, fromEOL, p2X, p2Y) {  var lines = textFrame.lines;  for (var i = 0; i < lines.length-1; i++) {    var bbox = b.bounds(lines[i]);    var p1X = bbox.left;    var p1Y = bbox.baseline;    if (fromEOL) {      p1X = bbox.right;      // special cases, end of line is      // space (32) or carriage return (13)      var lastChar = _.last(lines[i].characters);      var charCode = lastChar.contents.charCodeAt(0);      if (charCode === 13 || charCode === 32) {        p1X = b.bounds(lines[i].insertionPoints[-2]).right;      }    }    // draw line from start/end line to point    b.line(p1X, p1Y, p2X, p2Y);  }}function createUI(cb) {  var dialog = app.dialogs.add({    name: "Connect line starts or endings to point",    canCancel: true  });  var numInput1 = null;  var numInput2 = null;  var radioButtons = null;  with(dialog) {    // column    with(dialogColumns.add()) {      staticTexts.add({staticLabel: "Point X"});      staticTexts.add({staticLabel: "Point Y"});    }    // column    with(dialogColumns.add()) {      numInput1 = realEditboxes.add({editValue: 0});      numInput2 = realEditboxes.add({editValue: 0});    }    // column    with(dialogColumns.add()){      // border panel      with(borderPanels.add()){        staticTexts.add({staticLabel: "Connect to"});        radioButtons = radiobuttonGroups.add();        with(radioButtons){          radiobuttonControls.add({staticLabel: "Line start"});          radiobuttonControls.add({staticLabel: "Line end", checkedState: true});        }      }    }  }  var results = dialog.show();  if(results) {    cb(      null,      radioButtons.selectedButton === 1,      numInput1.editValue,      numInput2.editValue    );  } else {    cb("user clicked cancel");  }  // remove dialog from memory  dialog.destroy();}b.go(b.MODESILENT);